using System;
using Blish_HUD.Content;
using Blish_HUD.Input;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Blish_HUD.Controls
{
    public class GlowButton : Control, ICheckable
    {
        private const int BUTTON_WIDTH = 32;
        private const int BUTTON_HEIGHT = 32;

        private static Effect _glowEffect;

        protected AsyncTexture2D _activeIcon;

        private bool _checked;

        protected Color _glowColor = Color.White;

        protected AsyncTexture2D _icon;

        protected bool _toggleGlow;

        public GlowButton()
        {
            this._spriteBatchParameters = new SpriteBatchParameters(SpriteSortMode.Immediate, BlendState.AlphaBlend);
            this.Size = new Point(BUTTON_WIDTH, BUTTON_HEIGHT);
        }

        public AsyncTexture2D Icon
        {
            get => this._icon;
            set => SetProperty(ref this._icon, value);
        }

        /// <summary>
        ///     If provided, this icon will be shown when the button is active.  If not provided, a basic glow shader will be used
        ///     instead.
        /// </summary>
        public AsyncTexture2D ActiveIcon
        {
            get => this._activeIcon;
            set => SetProperty(ref this._activeIcon, value);
        }

        /// <summary>
        ///     Used to change the tint of the glow generated by the glow shader.  Is not used if <see cref="ActiveIcon" /> is
        ///     defined.
        /// </summary>
        public Color GlowColor
        {
            get => this._glowColor;
            set
            {
                if (SetProperty(ref this._glowColor, value))
                {
                    // Need to update the DrawEffect if it's currently active
                    _glowEffect?.Parameters["GlowColor"].SetValue(this._glowColor.ToVector4());
                }
            }
        }

        public bool ToggleGlow
        {
            get => this._toggleGlow;
            set => SetProperty(ref this._toggleGlow, value);
        }

        public event EventHandler<CheckChangedEvent> CheckedChanged;

        public bool Checked
        {
            get => this._checked;
            set
            {
                if (SetProperty(ref this._checked, value))
                {
                    if (this._toggleGlow && (this._activeIcon == null))
                    {
                        this._spriteBatchParameters.Effect = this._checked
                            ? GetGlowEffect()
                            : null;
                    }

                    OnChecked(new CheckChangedEvent(this._checked));
                }
            }
        }

        private void OnChecked(CheckChangedEvent e)
        {
            CheckedChanged?.Invoke(this, e);
        }

        private Effect GetGlowEffect()
        {
            _glowEffect = _glowEffect ?? BlishHud.ActiveContentManager.Load<Effect>(@"effects\glow");
            _glowEffect.Parameters["TextureWidth"].SetValue((float) this.Width);
            _glowEffect.Parameters["GlowColor"].SetValue(this._glowColor.ToVector4());

            return _glowEffect;
        }

        protected override CaptureType CapturesInput()
        {
            return CaptureType.Mouse;
        }

        protected override void OnMouseEntered(MouseEventArgs e)
        {
            if (!this._toggleGlow && (this._activeIcon == null))
            {
                this._spriteBatchParameters.Effect = GetGlowEffect();
            }

            base.OnMouseEntered(e);
        }

        protected override void OnMouseLeft(MouseEventArgs e)
        {
            if (!this._toggleGlow)
            {
                this._spriteBatchParameters.Effect = null;
            }

            base.OnMouseLeft(e);
        }

        protected override void OnClick(MouseEventArgs e)
        {
            if (this._toggleGlow)
            {
                // TODO: A different sound should be played for toggle
                Content.PlaySoundEffectByName(@"audio\button-click");
                this.Checked = !this._checked;
            }
            else
            {
                Content.PlaySoundEffectByName(@"audio\button-click");
            }

            base.OnClick(e);
        }

        protected override void Paint(SpriteBatch spriteBatch, Rectangle bounds)
        {
            if (this._icon != null)
            {
                var drawIcon = this._icon;

                if (this._activeIcon != null)
                {
                    if (!this._toggleGlow && this.MouseOver) drawIcon = this._activeIcon;
                    if (this._toggleGlow && this._checked) drawIcon = this._activeIcon;
                }

                spriteBatch.DrawOnCtrl(this, drawIcon, bounds);
            }
        }
    }
}